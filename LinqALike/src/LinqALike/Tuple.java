package LinqALike;

import LinqALike.Delegate.Condition;
import LinqALike.Delegate.Func1;

import static LinqALike.CommonDelegates.nullSafeEquals;
import static LinqALike.CommonDelegates.nullSafeToString;

/**
 * @author Geoff on 06/08/13
 */
@Deprecated //should be using Map.Entry. Dont know why i thought this was a good idea.
public class Tuple<TLeftMember, TRightMember> {

    public Tuple(TLeftMember left, TRightMember right){
        this.left = left;
        this.right = right;
    }

    public final TLeftMember left;
    public final TRightMember right;

    //static factories:
    public static <TLeft, TRight>
    Tuple<TLeft, TRight> pair(TLeft left, TRight right){
        return new Tuple<>(left, right);
    }

    // function delegates

    public static <TLeftMember> Func1<Tuple<TLeftMember, ?>, TLeftMember> Left(@SuppressWarnings("UnusedParameters") Class<TLeftMember> leftType){
        return pair -> pair.left;
    }
    public static <TRightMember> Func1<Tuple<?, TRightMember>, TRightMember> Right(Class<TRightMember> rightMemberType){
        return pair -> pair.right;
    }
    public static <TLeftMember, TRightMember> Func1<Tuple<TLeftMember, TRightMember>, Tuple<TRightMember, TLeftMember>> Reverse(){
        return existingTuple -> new Tuple<>(existingTuple.right, existingTuple.left);
    }

    //equals and toString

    @Override
    public String toString() {
        return "[left=" + nullSafeToString(left) + ",right=" + nullSafeToString(right) + "]";
    }

    // this code was auto-generated by intelliJ, and is safe(r) because via immutability.

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Tuple)) return false;

        Tuple tuple = (Tuple) o;

        if (left != null ? !left.equals(tuple.left) : tuple.left != null) return false;
        if (right != null ? !right.equals(tuple.right) : tuple.right != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = left != null ? left.hashCode() : 0;
        result = 31 * result + (right != null ? right.hashCode() : 0);
        return result;
    }

    public static <TLeftMember, TRightMember>
    Func1<Tuple<TLeftMember, ? extends Queryable<TRightMember>>, Iterable<Tuple<TLeftMember, TRightMember>>> FlattenValuesToTuple() {
        return entryWithMultipleValues -> entryWithMultipleValues.right.select(Tuple.<TLeftMember, TRightMember>makePairWithLeft(entryWithMultipleValues.left));
    }

    private static <TLeftMember, TRightMember> Func1<TRightMember, Tuple<TLeftMember, TRightMember>> makePairWithLeft(final TLeftMember left) {
        return right -> new Tuple<>(left, right);
    }

    public static <TRightMember> Condition<Tuple<?, TRightMember>> RightIs(final TRightMember candidateRight) {
        return new Condition.WithDescription<>(
                "The right member of the tuple is " + candidateRight,
                actual -> nullSafeEquals(actual.right, candidateRight)
        );
    }

    public static <TLeftMember> Condition<Tuple<TLeftMember,?>> LeftIs(final TLeftMember candidateLeft) {
        return new Condition.WithDescription<>(
                "The left member of the tuple is " + candidateLeft,
                actual -> nullSafeEquals(candidateLeft, actual.right)
        );
    }
}
